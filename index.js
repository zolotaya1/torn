const Telegraf = require('telegraf');
const Composer = require('telegraf/composer');
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const WizardScene = require('telegraf/scenes/wizard');
const webshot = require('webshot')
const fs = require('fs');
const express = require('express');
const http = require('http');
const mongoose = require('mongoose');
const Markup = require('telegraf/markup')


const exphbs = require('express-handlebars');
const request = require('request');
const UserService = require('./user-service');
const BotUtils = require('./utils');
const Logger = require('./logger');
const path = require('path');
const bodyParser = require('body-parser');
const MessagesService = require('./messages-service');
const users = require('./message-model');


mongoose.connect('mongodb://top:88993421q@ds022408.mlab.com:22408/top', { useNewUrlParser: true });

http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/plain'});
}).listen(process.env.PORT || 5000);

const stepHandler = new Composer();

const tot = new WizardScene('tot',
    stepHandler,
    (ctx) => {ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:');
        return ctx.wizard.next()
    },
    (ctx) => {
        const text = ctx.message.text;
        const markdown = text;


            UserService.getAll(function (err, users) {
                if (err) {
                    Logger.notify('Some error!' + err.message);
                    return;
                }

                users.forEach(function (user) {
                    bot.telegram.sendMessage(user.telegramId, markdown, {
                        parse_mode: 'Markdown',
                        disable_notification: false
                    });
                    console.log(ctx.message)
                });


            });
        ctx.reply('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', {
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', '‚ûï–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥'],
                    ['üí≥–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏', 'üîë–ê–¥–º–∏–Ω–∫–∞']
                ],
                resize_keyboard: true
            },
            disable_notification: false
        });
        return ctx.scene.leave()
    }
);

const tok = new WizardScene('tok',
    stepHandler,
    (ctx) => {
        ctx.reply('–£–∞–∂–∏—Ç–µ –∞–π–¥–∏:');
        return ctx.wizard.next()
    },
    (ctx) => {ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:');
        ctx.session.counter = ctx.message.text;
        return ctx.wizard.next()
    },
    (ctx) => {
        ctx.reply('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', {
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', '‚ûï–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥'],
                    ['üí≥–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏', 'üîë–ê–¥–º–∏–Ω–∫–∞']
                ],
                resize_keyboard: true
            },
            disable_notification: false
        });
        ctx.telegram.sendMessage(ctx.message.chat.id=`${ctx.session.counter}`, `${ctx.message.text}`)
        return ctx.scene.leave()
    }
    );
const top = new WizardScene('top',

    stepHandler,
    (ctx) => {
        const markdown = `
*–£–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ*:
 
"\`@name_channel - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\`"
`
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            },
        })
        console.log(typeof ctx.message.text);
        return ctx.wizard.next()
    },
    (ctx) => {
    if (ctx.message.text === 'üîµ–ù–∞–∑–∞–¥') {
        ctx.telegram.sendMessage(ctx.message.chat.id, '...', {
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                    ['‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
                ],
                resize_keyboard: true
            },
        })
        return ctx.scene.leave()
    }else {
        const html = `
‚ö†Ô∏è<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> 

–ö–∞–Ω–∞–ª: ${ctx.message.text}
–Æ–∑–µ—Ä: ${ctx.from.first_name}
–Æ–∑–µ—Ä–Ω–µ–π–º: @${ctx.from.username}
Message id: ${ctx.message.message_id}
–ß–∞—Ç –∞–π–¥–∏: ${ctx.message.chat.id}`;
        const html1 = `
<b>‚ûï–í–∞—à –∫–∞–Ω–∞–ª:</b>
 
"${ctx.message.text}"
 
<b>–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π.</b>`
        ctx.telegram.sendMessage(ctx.message.chat.id, html1,{
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                    ['‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
                ],
                resize_keyboard: true
            },
        });
        ctx.telegram.sendMessage(ctx.message.chat.id=549073144, html,{
            parse_mode: 'HTML'
        })
        return ctx.scene.leave()
    }
    },
    (ctx) => {

    const text = ctx.message.text;

     const re = /\D+/ig;
     const text1 = text.replace(re, '');

        const html = `
‚ö†Ô∏è<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> 

–ö–∞–Ω–∞–ª: ${ctx.session.counter}
–§—É–Ω–∫—Ü–∏—è: ${text1}
–ß–∞—Ç –∞–π–¥–∏: ${ctx.message.chat.id}`;
        const html1 = `
<b>‚ûï–í–∞—à –∫–∞–Ω–∞–ª:</b>
 
"${ctx.session.counter}"
 
<b>–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π.</b>`
        ctx.telegram.sendMessage(ctx.message.chat.id, html1,{
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º']
                ],
                resize_keyboard: true
            },
        })
        ctx.telegram.sendMessage(ctx.message.chat.id=549073144, html,{
            parse_mode: 'HTML'
        })
        return ctx.scene.leave()

    },

);
const teh = new WizardScene('teh',

    stepHandler,
    (ctx) => {
        const markdown = `
‚öí –ï—Å–ª–∏ —É –í–∞—Å –≤–¥—Ä—É–≥ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—Å—Ç—å –∫–∞–∫–∏–µ –ª–∏–±–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ –ú—ã —Ä–∞–¥—ã –±—É–¥–µ–º –í–∞—Å –≤—ã—Å–ª—É—à–∞—Ç—å.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à *MESSAGE* –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
`
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            },
        })
        console.log(typeof ctx.message.text);
        return ctx.wizard.next()
    },
    (ctx) => {
        if (ctx.message.text === 'üîµ–ù–∞–∑–∞–¥') {
            ctx.telegram.sendMessage(ctx.message.chat.id, '...', {
                reply_markup: {
                    keyboard: [
                        ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                        ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                        ['‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
                    ],
                    resize_keyboard: true
                },
            })
            return ctx.scene.leave()
        }else {
            const html = `
<b>–ö –≤–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:</b> 
–ö–∞–Ω–∞–ª: ${ctx.message.text}
–Æ–∑–µ—Ä: ${ctx.from.first_name}
–Æ–∑–µ—Ä–Ω–µ–π–º: @${ctx.from.username}
Message id: ${ctx.message.message_id}
–ß–∞—Ç –∞–π–¥–∏: ${ctx.message.chat.id}`;
            const html1 = `
üõ†<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
 
"${ctx.message.text}"
 
<b>–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úîÔ∏è

–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.</b>`
            ctx.telegram.sendMessage(ctx.message.chat.id, html1,{
                parse_mode: 'HTML',
                reply_markup: {
                    keyboard: [
                        ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                        ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                        ['‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
                    ],
                    resize_keyboard: true
                },
            });
            ctx.telegram.sendMessage(ctx.message.chat.id=549073144, html,{
                parse_mode: 'HTML'
            })
            return ctx.scene.leave()
        }
    },
    (ctx) => {

        const text = ctx.message.text;

        const re = /\D+/ig;
        const text1 = text.replace(re, '');

        const html = `
<b>–ö –≤–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:</b> 
–ö–∞–Ω–∞–ª: ${ctx.session.counter}
–§—É–Ω–∫—Ü–∏—è: ${text1}
–ß–∞—Ç –∞–π–¥–∏: ${ctx.message.chat.id}`;
        const html1 = `
<b>‚ûï–í–∞—à –∫–∞–Ω–∞–ª:</b>
 
"${ctx.session.counter}"
 
<b>–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π.</b>`
        ctx.telegram.sendMessage(ctx.message.chat.id, html1,{
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º']
                ],
                resize_keyboard: true
            },
        })
        ctx.telegram.sendMessage(ctx.message.chat.id=549073144, html,{
            parse_mode: 'HTML'
        })
        return ctx.scene.leave()

    },

);
const say999 = new WizardScene('say999',

    stepHandler,
    (ctx) => {
        const markdown = `
*–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏*:
 
`
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            },
        })
        console.log(typeof ctx.message.text);
        return ctx.wizard.next()
    },
    (ctx) => {
        if (ctx.message.text === 'üîµ–ù–∞–∑–∞–¥') {
            ctx.telegram.sendMessage(ctx.message.chat.id, '...', {
                reply_markup: {
                    keyboard: [
                        ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                        ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                        ['‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
                    ],
                    resize_keyboard: true
                },
            })
            return ctx.scene.leave()
        }else {
            const html = `
‚ö†Ô∏è<b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b> 

–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç: ${ctx.message.text}
–Æ–∑–µ—Ä: ${ctx.from.first_name}
–Æ–∑–µ—Ä–Ω–µ–π–º: @${ctx.from.username}
Message id: ${ctx.message.message_id}
–ß–∞—Ç –∞–π–¥–∏: ${ctx.message.chat.id}`;
            const markdown = `
üí≥*–û–ø–ª–∞—Ç–∞*:

‚û°Ô∏è \`–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–æ—Ç–∞\`  

‚û°Ô∏è –í–∞—à —Ç–µ–∫—Å—Ç: "*${ctx.message.text}*"

‚û°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: *999 ‚ÇΩ*       
`
            ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
                parse_mode: 'Markdown',
                reply_markup: {

                    inline_keyboard: [
                        [
                            {
                                text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ÇΩ',
                                callback_data: '1'
                            }
                        ]
                    ]
                },
            });
            ctx.telegram.sendMessage(ctx.message.chat.id=549073144, html,{
                parse_mode: 'HTML'
            })
            return ctx.scene.leave()
        }
    },
);
const say299 = new WizardScene('say299',

    stepHandler,
    (ctx) => {
        const markdown = `
üí≥*–û–ø–ª–∞—Ç–∞*:

‚û°Ô∏è \`–í —Ç–æ–ø 10\`
      
‚û°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å:  *299 ‚ÇΩ*       
`
        ctx.reply(`‚¨áÔ∏è`,{
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
             inline_keyboard: [
                    [
                        {
                            text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ÇΩ',
                            callback_data: '2'
                        }
                    ]
                ],
            },

        });
        return ctx.scene.leave()
    },
);
const say399 = new WizardScene('say399',

    stepHandler,
    (ctx) => {
        const markdown = `
üí≥*–û–ø–ª–∞—Ç–∞*:

‚û°Ô∏è \`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø 10\`
      
‚û°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å:  *399 ‚ÇΩ*       
`
        ctx.reply(`‚¨áÔ∏è`,{
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ÇΩ',
                            callback_data: '3'
                        }
                    ]
                ],
            },

        });
        return ctx.scene.leave()
    },
);
const say199 = new WizardScene('say199',

    stepHandler,
    (ctx) => {
        const markdown = `
üí≥*–û–ø–ª–∞—Ç–∞*:

‚û°Ô∏è \`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\`
      
‚û°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å:  *199 ‚ÇΩ*       
`
        ctx.reply(`‚¨áÔ∏è`,{
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ÇΩ',
                            callback_data: '4'
                        }
                    ]
                ],
            },

        });
        return ctx.scene.leave()
    },
);
const say99 = new WizardScene('say99',

    stepHandler,
    (ctx) => {
        const markdown = `
üí≥*–û–ø–ª–∞—Ç–∞*:

‚û°Ô∏è \`–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç\`
      
‚û°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å:  *99 ‚ÇΩ*       
`
        ctx.reply(`‚¨áÔ∏è`,{
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ÇΩ',
                            callback_data: '5'
                        }
                    ]
                ],
            },

        });
        return ctx.scene.leave()
    },
);
const say149 = new WizardScene('say149',

    stepHandler,
    (ctx) => {
        const markdown = `
üí≥*–û–ø–ª–∞—Ç–∞*:

‚û°Ô∏è \`–ú–µ—Ç–∫–∞ 'üî∏' –≤–æ–∑–ª–µ –∫–∞–Ω–∞–ª–∞\`
      
‚û°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å:  *149 ‚ÇΩ*       
`
        ctx.reply(`‚¨áÔ∏è`,{
            reply_markup: {
                keyboard: [
                    ['üîµ–ù–∞–∑–∞–¥']
                ],
                resize_keyboard: true
            }
        })
        ctx.telegram.sendMessage(ctx.message.chat.id, markdown,{
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚ÇΩ',
                            callback_data: '6'
                        }
                    ]
                ],
            },

        });
        return ctx.scene.leave()
    },
);




const bot = new Telegraf('660235857:AAHpND3YGg6CnfDXWKcTt6NhT97oZK5B_K8');

const stage = new Stage();

const clientMessage = new RegExp('\/start');

stage.register(top, tok, tot, say999, say299, say399, say199, say99, say149, teh);
bot.use(session());
bot.use(stage.middleware());
bot.hears('‚ûï–î–æ–±–∞–≤–∏—Ç—å', (ctx) => {
    ctx.scene.enter('top');
});
bot.hears('‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞', (ctx) => {
    ctx.scene.enter('teh');
});
bot.hears('‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', (ctx) => {
    const markdown = `
‚ûï*–£—Å–ª–æ–≤–∏—è*:

–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –∫–∞—Ç–∞–ª–æ–≥, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Å–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à –±–æ—Ç, —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –º–∏–Ω–∏–º—É–º 24 —á–∞—Å–∞ –Ω–∞ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –µ–µ –≤ *–¢–û–ü*–µ.

*–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç*: t.me/catalogthebot
`

    ctx.telegram.sendMessage(ctx.message.chat.id, markdown, {
        parse_mode: 'Markdown',
        reply_markup: {
            keyboard: [
                ['‚ûï–î–æ–±–∞–≤–∏—Ç—å'],
                ['üîµ–ù–∞–∑–∞–¥']

            ],
            resize_keyboard: true
        }
    })
});
bot.hears('üí≥ 1', (ctx) => {
    ctx.scene.enter('say999');
});
bot.hears('üí≥ 2', (ctx) => {
    ctx.scene.enter('say299');
});
bot.hears('üí≥ 3', (ctx) => {
    ctx.scene.enter('say399');
});
bot.hears('üí≥ 4', (ctx) => {
    ctx.scene.enter('say199');
});
bot.hears('üí≥ 5', (ctx) => {
    ctx.scene.enter('say99');
});
bot.hears('üí≥ 6', (ctx) => {
    ctx.scene.enter('say149');
});
bot.hears('üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º', (ctx) => {

        const markdown = `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —Ñ—É–Ω–∫—Ü–∏—é:`

        ctx.telegram.sendMessage(ctx.message.chat.id, markdown, {
            parse_mode: 'Markdown',
            reply_markup: {
                keyboard: [
                    ['‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'üí≥–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏'],
                    ['üîµ–ù–∞–∑–∞–¥']

                ],
                resize_keyboard: true
            }
        })
});
bot.hears('–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', (ctx) => {
    const id = ctx.message.chat.id;
    const admin = 549073144;

    if(id === admin) {
        ctx.scene.enter('tok')
    };
});
bot.hears('üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', (ctx) => {


    ctx.telegram.sendMessage(ctx.message.chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª`, {
        reply_markup: {
            keyboard: [
                ['üåê–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'üì°–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò'],
                ['üéâ–Æ–º–æ—Ä –∏ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üåé–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –≠–º–∏–≥—Ä–∞—Ü–∏—è'],
                ['üï∂–ú–æ–¥–∞ –∏ –ö—Ä–∞—Å–æ—Ç–∞', 'üé¨–§–∏–ª—å–º—ã –∏ –°–µ—Ä–∏–∞–ª—ã'],
                ['üéß–ú—É–∑—ã–∫–∞', 'üéÆ–ò–≥—Ä—ã –∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'],
                ['üìù–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞', 'üìñ–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'],
                ['üíä–ú–µ–¥–∏—Ü–∏–Ω–∞', 'üì∑–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –§–æ—Ç–æ'],
                ['üìä–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –≠–∫–æ–Ω–æ–º–∏–∫–∞', 'üîñ–¶–∏—Ç–∞—Ç—ã'],
                ['üéØ–ó–¥–æ—Ä–æ–≤—å–µ –∏ –°–ø–æ—Ä—Ç', 'üîû–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö'],
                ['üîµ–ù–∞–∑–∞–¥']
            ],
            resize_keyboard: true
        },
        disable_notification: false
    })
});
bot.hears('üåê–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle1('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', function (getErr, message,) {

        const one = message.one;
        const text = message.technology;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'technology1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üì°–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle3('–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò', function (getErr, message,) {

        const one = message.one;
        const text = message.news;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'news1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üéâ–Æ–º–æ—Ä –∏ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle4('–Æ–º–æ—Ä –∏ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', function (getErr, message,) {

        const one = message.one;
        const text = message.lol;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'lol1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üåé–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –≠–º–∏–≥—Ä–∞—Ü–∏—è', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle6('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –≠–º–∏–≥—Ä–∞—Ü–∏—è', function (getErr, message,) {

        const one = message.one;
        const text = message.emigrant;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'emigrant1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üï∂–ú–æ–¥–∞ –∏ –ö—Ä–∞—Å–æ—Ç–∞', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle25('–ú–æ–¥–∞ –∏ –ö—Ä–∞—Å–æ—Ç–∞', function (getErr, message,) {

        const one = message.one;
        const text = message.fashion;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'fashion1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üé¨–§–∏–ª—å–º—ã –∏ –°–µ—Ä–∏–∞–ª—ã', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle10('–§–∏–ª—å–º—ã –∏ –°–µ—Ä–∏–∞–ª—ã', function (getErr, message,) {

        const one = message.one;
        const text = message.films;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'films1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üéÆ–ò–≥—Ä—ã –∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle14('–ò–≥—Ä—ã –∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', function (getErr, message,) {

        const one = message.one;
        const text = message.games;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'games1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üìù–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle16('–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞', function (getErr, message,) {

        const one = message.one;
        const text = message.linguistics;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'linguistics1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üìñ–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle18('–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', function (getErr, message,) {

        const one = message.one;
        const text = message.literature;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'literature1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üíä–ú–µ–¥–∏—Ü–∏–Ω–∞', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle20('–ú–µ–¥–∏—Ü–∏–Ω–∞', function (getErr, message,) {

        const one = message.one;
        const text = message.medic;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'medic1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üîñ–¶–∏—Ç–∞—Ç—ã', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle22('–¶–∏—Ç–∞—Ç—ã', function (getErr, message,) {

        const one = message.one;
        const text = message.quote;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'quote1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üì∑–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –§–æ—Ç–æ', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle24('–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –§–æ—Ç–æ', function (getErr, message,) {

        const one = message.one;
        const text = message.pictures;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'pictures1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üéß–ú—É–∑—ã–∫–∞', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle9('–ú—É–∑—ã–∫–∞', function (getErr, message,) {

        const one = message.one;
        const text = message.music;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'music1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üéØ–ó–¥–æ—Ä–æ–≤—å–µ –∏ –°–ø–æ—Ä—Ç', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle29('–ó–¥–æ—Ä–æ–≤—å–µ –∏ –°–ø–æ—Ä—Ç', function (getErr, message,) {

        const one = message.one;
        const text = message.sport;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'sport1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üîû–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle31('–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', function (getErr, message,) {

        const one = message.one;
        const text = message.xxx;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'xxx1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üìä–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –≠–∫–æ–Ω–æ–º–∏–∫–∞', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle27('–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –≠–∫–æ–Ω–æ–º–∏–∫–∞', function (getErr, message,) {

        const one = message.one;
        const text = message.politic;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
${one}        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚û°Ô∏è',
                            callback_data: 'politic1'
                        }
                    ],
                ]
            }
        })
    });

});
bot.hears('üìà–¢–æ–ø 10', (message) => {

    const clientInfo = BotUtils.getClientInfo(message);
    MessagesService.getByTitle33('–¢–æ–ø 10', function (getErr, message,) {

        const text = message.top10;
        const re = /,/gi;
        const rr = text.replace(re, '');

        const html = `
        
${rr}
`;


        bot.telegram.sendMessage(clientInfo.telegramId, html,{
            parse_mode: 'HTML',
        })
    });
});
bot.hears('üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', (ctx) => {

    const html = `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –ø–µ—Ä–∏–æ–¥:`

    ctx.telegram.sendMessage(ctx.message.chat.id, html, {
        parse_mode: 'HTML',
        reply_markup: {
            keyboard: [
                ['üïê–ó–∞ 24 —á–∞—Å–∞', 'üïó–ó–∞ –ú–µ—Å—è—Ü'],
                ['üîµ–ù–∞–∑–∞–¥']

            ],
            resize_keyboard: true
        }
    })
});
bot.hears('üí≥–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏', (ctx) => {
    const markdown = `
üí≥ *–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏*

\`–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–æ—Ç–∞\` - *999* ‚ÇΩ.

\`–í —Ç–æ–ø 10\` - *299* ‚ÇΩ.

\`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø 10\` - *399* ‚ÇΩ.

\`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\` - *199* ‚ÇΩ.

\`–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç\` - *99* ‚ÇΩ.

\`–ú–µ—Ç–∫–∞ 'üî∏' –≤–æ–∑–ª–µ –∫–∞–Ω–∞–ª–∞\` - *149* ‚ÇΩ.

*–§—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*:

\`–í —Ç–æ–ø 10\` - *–ü–æ–∫–∞ –Ω–µ –≤—ã—Ç–µ—Å–Ω—è—Ç –¥—Ä—É–≥–∏–µ –∑–∞–∫–∞–∑—ã*.

\`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø 10\` - *–ù–∞ 36 —á–∞—Å–æ–≤*.

\`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\` - *–ù–∞ 36 —á–∞—Å–æ–≤*.

\`–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç\` - *1 –º–µ—Å—è—Ü*.

\`–ú–µ—Ç–∫–∞ 'üî∏' –≤–æ–∑–ª–µ –∫–∞–Ω–∞–ª–∞\` - *1 –º–µ—Å—è—Ü*.
`

    bot.telegram.sendMessage(ctx.message.chat.id, markdown, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ó–∞–∫–∞–∑–∞—Ç—å ‚ÇΩ',
                        callback_data: 'many'
                    }
                ],

            ]
        }
    })
});
bot.hears('üîë–ê–¥–º–∏–Ω–∫–∞', (ctx) => {
    const id = ctx.message.chat.id;
    const admin = 549073144;

    if(id === admin) {
        const markdown = `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —Ñ—É–Ω–∫—Ü–∏—é:`

        ctx.telegram.sendMessage(ctx.message.chat.id, markdown, {
            parse_mode: 'Markdown',
            reply_markup: {
                keyboard: [
                    ['–†–∞—Å—Å—ã–ª–∫–∞', '–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'],
                    ['üîµ–ù–∞–∑–∞–¥']

                ],
                resize_keyboard: true
            }
        })
    }
});
bot.hears('–†–∞—Å—Å—ã–ª–∫–∞', stepHandler, (ctx) => {
    const id = ctx.message.chat.id;
    const admin = 549073144;

    if(id === admin) {
        ctx.scene.enter('tot')
    };
});
bot.hears('üîµ–ù–∞–∑–∞–¥', stepHandler, (ctx) => {

    const id = ctx.message.chat.id;
    const admin = 549073144;

    if(id === admin) {
        ctx.telegram.sendMessage(ctx.message.chat.id, `...`, {
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                    ['üîë–ê–¥–º–∏–Ω–∫–∞']
                ],
                resize_keyboard: true
            },
            disable_notification: false
        })
    }else{
        ctx.telegram.sendMessage(ctx.message.chat.id, `...`, {
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                    ['‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
                ],
                resize_keyboard: true
            },
            disable_notification: false
        })
    }
});
bot.hears('üïê–ó–∞ 24 —á–∞—Å–∞', (ctx) => {

    ctx.telegram.sendMessage(ctx.message.chat.id, `–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞...`,)

    const optionsSelector = {
        captureSelector: '.chartjs-render-monitor'
    };
    webshot('https://uztelegram.com/channel/Prikolgif?period=day',
        '1112.jpg', optionsSelector, function(err) {
            if (!err) {
                console.log('–°–¥–µ–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç')
                const day = 'üïê–ó–∞ 24 —á–∞—Å–∞';
                ctx.replyWithPhoto({ source: fs.readFileSync(__dirname + '/1112.jpg')}, {
                    caption: day,
                })
            }
        })
});
bot.hears('üïó–ó–∞ –ú–µ—Å—è—Ü', (ctx) => {

    ctx.telegram.sendMessage(ctx.message.chat.id, `–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞...`,)

    const optionsSelector = {
        captureSelector: '.chartjs-render-monitor'
    };
    webshot('https://uztelegram.com/channel/Prikolgif?period=month',
        '1111.jpg', optionsSelector, function(err) {
            if (!err) {
                console.log('–°–¥–µ–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç')
                const day = 'üïó–ó–∞ –ú–µ—Å—è—Ü';
                ctx.replyWithPhoto({ source: fs.readFileSync(__dirname + '/1111.jpg')}, {
                    caption: day,
                })
            }
        })
});
bot.hears(clientMessage, (message) => {

    const id = message.chat.id;
    const admin = 549073144;

    if(id === admin){
        const markdown = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *${message.from.first_name}*!
`;

        bot.telegram.sendMessage(message.chat.id, markdown, {
            parse_mode: 'Markdown',
            reply_markup: {
                keyboard: [
                    ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                    ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                    ['üîë–ê–¥–º–∏–Ω–∫–∞']
                ],
                resize_keyboard: true
            },
            disable_notification: false
        })
    }else{
        Logger.notify('Sending message from the default handler ');
        const clientInfo = BotUtils.getClientInfo(message);


        UserService.saveUser(clientInfo, function (saveErr,) {
            if (saveErr) {
                bot.telegram.sendMessage(clientInfo.telegramId, 'Some error! Sorry',);
                return;
            }
            MessagesService.getByTitle('start', function (getErr, message) {

                const text = message.start;
                const re = /,/gi;
                const rr = text.replace(re, '');
                const markdown = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *${clientInfo.firstName}*!
${rr}`;

                bot.telegram.sendMessage(clientInfo.telegramId, markdown, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        keyboard: [
                            ['üìÉ–ö–∞—Ç–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–≤', 'üìà–¢–æ–ø 10'],
                            ['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', 'üíª–í–µ–±–º–∞—Å—Ç–µ—Ä–∞–º'],
                            ['‚öí–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
                        ],
                        resize_keyboard: true
                    },
                    disable_notification: false
                })

            });
        });
    }
});
bot.on('callback_query', ctx => {

    const query = ctx.update.callback_query.data;
    const chatId = ctx.update.callback_query.from.id;
    const messageId = ctx.update.callback_query.message.message_id;

    if (query === 'technology1') {

        MessagesService.getByTitle2('technology', function (getErr, message,) {

            const one = message.one;
            const text = message.technology1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'technology'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'technology2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'technology') {
        MessagesService.getByTitle2('technology', function (getErr, message,) {

            const one = message.one;
            const text = message.technology;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'technology1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'technology2') {
        MessagesService.getByTitle2('technology', function (getErr, message,) {

            const one = message.one;
            const text = message.technology2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'technology1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'technology3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'technology3') {
        MessagesService.getByTitle2('technology', function (getErr, message,) {

            const one = message.one;
            const text = message.technology3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'technology2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'news1') {

        MessagesService.getByTitle5('news', function (getErr, message,) {

            const one = message.one;
            const text = message.news1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'news'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'news2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'news') {
        MessagesService.getByTitle5('news', function (getErr, message,) {

            const one = message.one;
            const text = message.news;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'news1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'news2') {
        MessagesService.getByTitle5('news', function (getErr, message,) {

            const one = message.one;
            const text = message.news2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'news1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'news3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'news3') {
        MessagesService.getByTitle5('news', function (getErr, message,) {

            const one = message.one;
            const text = message.news3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'news2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'lol1') {

        MessagesService.getByTitle8('lol', function (getErr, message,) {

            const one = message.one;
            const text = message.lol1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'lol'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'lol2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'lol') {
        MessagesService.getByTitle8('lol', function (getErr, message,) {

            const one = message.one;
            const text = message.lol;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'lol1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'lol2') {
        MessagesService.getByTitle8('lol', function (getErr, message,) {

            const one = message.one;
            const text = message.lol2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'lol1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'lol3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'lol3') {
        MessagesService.getByTitle8('lol', function (getErr, message,) {

            const one = message.one;
            const text = message.lol3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'lol2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'emigrant1') {

        MessagesService.getByTitle7('emigrant', function (getErr, message,) {

            const one = message.one;
            const text = message.emigrant1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'emigrant'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'emigrant2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'emigrant') {
        MessagesService.getByTitle7('emigrant', function (getErr, message,) {

            const one = message.one;
            const text = message.emigrant;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'emigrant1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'emigrant2') {
        MessagesService.getByTitle7('emigrant', function (getErr, message,) {

            const one = message.one;
            const text = message.emigrant2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'emigrant1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'emigrant3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'emigrant3') {
        MessagesService.getByTitle7('emigrant', function (getErr, message,) {

            const one = message.one;
            const text = message.emigrant3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'emigrant2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'fashion1') {

        MessagesService.getByTitle11('fashion', function (getErr, message,) {

            const one = message.one;
            const text = message.fashion1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'fashion'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'fashion2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'fashion') {
        MessagesService.getByTitle11('fashion', function (getErr, message,) {

            const one = message.one;
            const text = message.fashion;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'fashion1'
                }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'fashion2') {
        MessagesService.getByTitle11('fashion', function (getErr, message,) {

            const one = message.one;
            const text = message.fashion2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'fashion1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'fashion3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'fashion3') {
        MessagesService.getByTitle11('fashion', function (getErr, message,) {

            const one = message.one;
            const text = message.fashion3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'fashion2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'films1') {

        MessagesService.getByTitle12('films', function (getErr, message,) {

            const one = message.one;
            const text = message.films1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'films'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'films2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'films') {
        MessagesService.getByTitle12('films', function (getErr, message,) {

            const one = message.one;
            const text = message.films;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'films1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'films2') {
        MessagesService.getByTitle12('films', function (getErr, message,) {

            const one = message.one;
            const text = message.films2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'films1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'films3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'films3') {
        MessagesService.getByTitle12('films', function (getErr, message,) {

            const one = message.one;
            const text = message.films3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'films2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'music1') {

        MessagesService.getByTitle13('music', function (getErr, message,) {

            const one = message.one;
            const text = message.music1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'music'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'music2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'music') {
        MessagesService.getByTitle13('music', function (getErr, message,) {

            const one = message.one;
            const text = message.music;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'music1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'music2') {
        MessagesService.getByTitle13('music', function (getErr, message,) {

            const one = message.one;
            const text = message.music2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'music1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'music3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'music3') {
        MessagesService.getByTitle13('music', function (getErr, message,) {

            const one = message.one;
            const text = message.music3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'music2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'games1') {

        MessagesService.getByTitle15('games', function (getErr, message,) {

            const one = message.one;
            const text = message.games1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'games'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'games2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'games') {
        MessagesService.getByTitle15('games', function (getErr, message,) {

            const one = message.one;
            const text = message.games;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'games1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'games2') {
        MessagesService.getByTitle15('games', function (getErr, message,) {

            const one = message.one;
            const text = message.games2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'games1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'games3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'games3') {
        MessagesService.getByTitle15('games', function (getErr, message,) {

            const one = message.one;
            const text = message.games3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'games2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'linguistics1') {

        MessagesService.getByTitle17('linguistics', function (getErr, message,) {

            const one = message.one;
            const text = message.linguistics1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'linguistics'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'linguistics2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'linguistics') {
        MessagesService.getByTitle17('linguistics', function (getErr, message,) {

            const one = message.one;
            const text = message.linguistics;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'linguistics1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'linguistics2') {
        MessagesService.getByTitle17('linguistics', function (getErr, message,) {

            const one = message.one;
            const text = message.linguistics2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'linguistics1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'linguistics3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'linguistics3') {
        MessagesService.getByTitle17('linguistics', function (getErr, message,) {

            const one = message.one;
            const text = message.linguistics3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'linguistics2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'literature1') {

        MessagesService.getByTitle19('literature', function (getErr, message,) {

            const one = message.one;
            const text = message.literature1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'literature'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'literature2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'literature') {
        MessagesService.getByTitle19('literature', function (getErr, message,) {

            const one = message.one;
            const text = message.literature;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'literature1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'literature2') {
        MessagesService.getByTitle19('literature', function (getErr, message,) {

            const one = message.one;
            const text = message.literature2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'literature1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'literature3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'literature3') {
        MessagesService.getByTitle19('literature', function (getErr, message,) {

            const one = message.one;
            const text = message.literature3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'literature2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'medic1') {

        MessagesService.getByTitle21('medic', function (getErr, message,) {

            const one = message.one;
            const text = message.medic1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'medic'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'medic2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'medic') {
        MessagesService.getByTitle21('medic', function (getErr, message,) {

            const one = message.one;
            const text = message.medic;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'medic1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'medic2') {
        MessagesService.getByTitle21('medic', function (getErr, message,) {

            const one = message.one;
            const text = message.medic2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'medic1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'medic3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'medic3') {
        MessagesService.getByTitle21('medic', function (getErr, message,) {

            const one = message.one;
            const text = message.medic3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'medic2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'quote1') {

        MessagesService.getByTitle23('quote', function (getErr, message,) {

            const one = message.one;
            const text = message.quote1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'quote'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'quote2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'quote') {
        MessagesService.getByTitle23('quote', function (getErr, message,) {

            const one = message.one;
            const text = message.quote;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'quote1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'quote2') {
        MessagesService.getByTitle23('quote', function (getErr, message,) {

            const one = message.one;
            const text = message.quote2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'quote1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'quote3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'quote3') {
        MessagesService.getByTitle23('quote', function (getErr, message,) {

            const one = message.one;
            const text = message.quote3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'quote2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'pictures1') {

        MessagesService.getByTitle26('pictures', function (getErr, message,) {

            const one = message.one;
            const text = message.pictures1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'pictures'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'pictures2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'pictures') {
        MessagesService.getByTitle26('pictures', function (getErr, message,) {

            const one = message.one;
            const text = message.pictures;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'pictures1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'pictures2') {
        MessagesService.getByTitle26('pictures', function (getErr, message,) {

            const one = message.one;
            const text = message.pictures2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'pictures1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'pictures3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'pictures3') {
        MessagesService.getByTitle26('pictures', function (getErr, message,) {

            const one = message.one;
            const text = message.pictures3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'pictures2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'politic1') {

        MessagesService.getByTitle28('politic', function (getErr, message,) {

            const one = message.one;
            const text = message.politic1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'politic'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'politic2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'politic') {
        MessagesService.getByTitle28('politic', function (getErr, message,) {

            const one = message.one;
            const text = message.politic;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'politic1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'politic2') {
        MessagesService.getByTitle28('politic', function (getErr, message,) {

            const one = message.one;
            const text = message.politic2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'politic1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'politic3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'politic3') {
        MessagesService.getByTitle28('politic', function (getErr, message,) {

            const one = message.one;
            const text = message.politic3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'politic2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'sport1') {

        MessagesService.getByTitle30('sport', function (getErr, message,) {

            const one = message.one;
            const text = message.sport1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'sport'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'sport2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'sport') {
        MessagesService.getByTitle30('sport', function (getErr, message,) {

            const one = message.one;
            const text = message.sport;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'sport1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'sport2') {
        MessagesService.getByTitle30('sport', function (getErr, message,) {

            const one = message.one;
            const text = message.sport2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'sport1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'sport3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'sport3') {
        MessagesService.getByTitle30('sport', function (getErr, message,) {

            const one = message.one;
            const text = message.sport3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'sport2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'xxx1') {

        MessagesService.getByTitle32('xxx', function (getErr, message,) {

            const one = message.one;
            const text = message.xxx1;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'xxx'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'xxx2'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'xxx') {
        MessagesService.getByTitle32('xxx', function (getErr, message,) {

            const one = message.one;
            const text = message.xxx;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'xxx1'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'xxx2') {
        MessagesService.getByTitle32('xxx', function (getErr, message,) {

            const one = message.one;
            const text = message.xxx2;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'xxx1'
                            },
                            {
                                text: '‚û°Ô∏è',
                                callback_data: 'xxx3'
                            }
                        ],
                    ]
                }
            })
        })
    }
    else if (query === 'xxx3') {
        MessagesService.getByTitle32('xxx', function (getErr, message,) {

            const one = message.one;
            const text = message.xxx3;
            const re = /,/gi;
            const rr = text.replace(re, '');
            const html = `
${one}           
${rr}
`;

            ctx.editMessageText( html,{
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è',
                                callback_data: 'xxx2'
                            }
                        ],
                    ]
                }
            })
        })
    }

    else if (query === 'many') {

            const markdown = `
            *üí≥–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —Ñ—É–Ω–∫—Ü–∏—é:*
            
*1* ‚û°Ô∏è\`–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–æ—Ç–∞\` - *999* ‚ÇΩ.

*2* ‚û°Ô∏è\`–í —Ç–æ–ø 10\` - *299* ‚ÇΩ.

*3* ‚û°Ô∏è\`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø 10\` - *399* ‚ÇΩ.

*4* ‚û°Ô∏è\`–ù–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\` - *199* ‚ÇΩ.

*5* ‚û°Ô∏è\`–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç\` - *99* ‚ÇΩ.

*6* ‚û°Ô∏è\`–ú–µ—Ç–∫–∞ 'üî∏' –≤–æ–∑–ª–µ –∫–∞–Ω–∞–ª–∞\` - *149* ‚ÇΩ.

`;

            ctx.telegram.sendMessage(ctx.chat.id, markdown,{
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        ['üí≥ 1', 'üí≥ 2', 'üí≥ 3',],
                        ['üí≥ 4', 'üí≥ 5', 'üí≥ 6',]
                    ],
                    resize_keyboard: true
                }
            })

    }

    else if (query === '1') {

        const markdown = `
            *üí≥–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*           
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'QIWI.–ö–æ—à–µ–ª–µ–∫',
                            callback_data: 'QIWI1'
                        },
                        {
                            text: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
                            callback_data: 'yandex1'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === '2') {

        const markdown = `
            *üí≥–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'QIWI.–ö–æ—à–µ–ª–µ–∫',
                            callback_data: 'QIWI2'
                        },
                        {
                            text: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
                            callback_data: 'yandex2'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === '3') {

        const markdown = `
            *üí≥–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'QIWI.–ö–æ—à–µ–ª–µ–∫',
                            callback_data: 'QIWI3'
                        },
                        {
                            text: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
                            callback_data: 'yandex3'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === '4') {

        const markdown = `
            *üí≥–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'QIWI.–ö–æ—à–µ–ª–µ–∫',
                            callback_data: 'QIWI4'
                        },
                        {
                            text: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
                            callback_data: 'yandex4'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === '5') {

        const markdown = `
            *üí≥–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'QIWI.–ö–æ—à–µ–ª–µ–∫',
                            callback_data: 'QIWI5'
                        },
                        {
                            text: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
                            callback_data: 'yandex5'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === '6') {

        const markdown = `
            *üí≥–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'QIWI.–ö–æ—à–µ–ª–µ–∫',
                            callback_data: 'QIWI6'
                        },
                        {
                            text: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
                            callback_data: 'yandex6'
                        }
                    ],
                ]
            }
        })

    }

    else if (query === 'QIWI1') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".

–¢–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: *999* ‚ÇΩ.
`;

        ctx.editMessageText(markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {

                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D=79872132562&amountInteger=999'
                        }
                        ],
                    [
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'QIWI2') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".

–¢–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: *299* ‚ÇΩ.
`;

        ctx.editMessageText(markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {

                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D=79872132562&amountInteger=299'
                        }
                    ],
                    [
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'QIWI3') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".

–¢–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: *399* ‚ÇΩ.
`;

        ctx.editMessageText(markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {

                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D=79872132562&amountInteger=399'
                        }
                    ],
                    [
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'QIWI4') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".

–¢–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: *199* ‚ÇΩ.
`;

        ctx.editMessageText(markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {

                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D=79872132562&amountInteger=199'
                        }
                    ],
                    [
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'QIWI5') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".

–¢–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: *99* ‚ÇΩ.
`;

        ctx.editMessageText(markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {

                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D=79872132562&amountInteger=99'
                        }
                    ],
                    [
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'QIWI6') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".

–¢–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: *149* ‚ÇΩ.
`;

        ctx.editMessageText(markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {

                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://qiwi.com/payment/form/99?extra%5B%27account%27%5D=79872132562&amountInteger=149'
                        }
                    ],
                    [
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }

    else if (query === 'yandex1') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://money.yandex.ru/to/410014917439508/999'
                        },
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'yandex2') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://money.yandex.ru/to/410014917439508/299'
                        },
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'yandex3') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://money.yandex.ru/to/410014917439508/399'
                        },
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'yandex4') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://money.yandex.ru/to/410014917439508/199'
                        },
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'yandex5') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://money.yandex.ru/to/410014917439508/99'
                        },
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }
    else if (query === 'yandex6') {

        const markdown = `
*üí≥–û–ø–ª–∞—Ç–∞*:

–í–æ–∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≥—Ä–∞—Ñ–µ "*–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É*" —É–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ "\`@name_channel\`".
`;

        ctx.editMessageText( markdown,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ',
                            url: 'https://money.yandex.ru/to/410014917439508/149'
                        },
                        {
                            text: '–û–ø–ª–∞—á–µ–Ω–æ ‚ÇΩ',
                            callback_data: 'say'
                        }
                    ],
                ]
            }
        })

    }

    else{
        const markdown = `
üí≥*–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—è*.
        
\`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—É—Ö —á–∞—Å–æ–≤.\``
        ctx.editMessageText( markdown ,{
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
        })}

console.log(ctx.update)
});
bot.startPolling();

